#version 450

const int NUM_NODES = 4096;//aim 8192
const int MAX_POINT = 32768; //aim 65536
const float K_BLENDING_MAX_DISTANCE = 0.00001;

struct Node
{
    vec4 boxPos;
    vec4 boxSize;
    ivec4 children;
    int cloudPoints[16];
};

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0, std140) uniform UniformBufferObject
{
// Bloc de flags entiers dans un vec4
    vec4 settings1;
// x = lighting (int)
// y = boxDebug (int)
// z = randomColor (int)
// w = unused

// Bloc de floats divers
    vec4 settings2;
// x = sphereRadius
// y = time
// z = blendingFactor
// w = far

// Reflectivity et padding
    vec4 settings3;
// x = reflectivity
// yzw = unused

    vec4 lightingDir;
    vec4 objectColor;

    vec4 cameraPos;
    vec4 cameraFront;

} ubo;

#define ubo_lighting         int(ubo.settings1.x)
#define ubo_boxDebug         int(ubo.settings1.y)
#define ubo_randomColor      int(ubo.settings1.z)

#define ubo_sphereRadius     ubo.settings2.x
#define ubo_time             ubo.settings2.y
#define ubo_blendingFactor   ubo.settings2.z
#define ubo_far              ubo.settings2.w

#define ubo_reflectivity     ubo.settings3.x

#define ubo_cameraPos        ubo.cameraPos.xyz
#define ubo_cameraFront      normalize(ubo.cameraFront.xyz)
#define ubo_lightingDir      normalize(ubo.lightingDir.xyz)
#define ubo_objectColor      ubo.objectColor.xyz


layout(set = 0, binding = 1, rgba32f) uniform writeonly image2D img_output;


layout(std430, binding = 2) buffer MySSBO
{
    Node SSBONodes[NUM_NODES];

    //vec4 cloudPoints[MAX_POINT];

} ssbo;


layout(std140, set = 0, binding = 2) buffer CloudPointsBuffer {
    vec4 cloudPoints[MAX_POINT];
} ssbo_2;


const int MAX_STEPS = 128;
//const float MAX_DIST = 100.0;
const float EPSILON = 0.001;
const int MAX_RECURSION_DEPTH = 3;

struct Ray
{
    vec3 origin;
    vec3 direction;
};

struct Material
{
    vec3 color;
    float reflectivity;
};

Ray generateRay(vec2 uv)
{
    vec3 forward = normalize(ubo.cameraFront.xyz);
    if (length(forward) < 0.001 || isnan(forward.x))
        forward = vec3(0.0, 0.0, -1.0);

    vec3 right = normalize(cross(forward, vec3(0.0, 1.0, 0.0)));
    vec3 up = normalize(cross(right, forward));

    float aspectRatio = 16.0 / 9.0;

    vec3 rayDir = normalize(forward + uv.x * right * aspectRatio - uv.y * up);
    return Ray(ubo_cameraPos, rayDir);
}

float smoothMin(float a, float b, float k)
{
    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);
    return mix(b, a, h) - k * h * (1.0 - h);
}

float sphereSDF(vec3 p, vec3 center, float radius)
{
    return length(p - center) - radius;
}

float boxSDF(vec3 p, vec3 center, vec3 size)
{
    // because we send min.xyz and not the real center
    center = center+size / 2.0f;

    vec3 d = abs(p - center) - size / 2.0f;
    return length(max(d, 0.0));
}

bool intersectRayAABB(vec3 ro, vec3 rd, vec3 minB, vec3 maxB)
{
    // take sphere radius into account
    minB -= ubo_sphereRadius + K_BLENDING_MAX_DISTANCE;
    maxB += ubo_sphereRadius + K_BLENDING_MAX_DISTANCE;
    
    vec3 invDir = 1.0 / rd;

    vec3 t0s = (minB - ro) * invDir;
    vec3 t1s = (maxB - ro) * invDir;

    vec3 tsmaller = min(t0s, t1s);
    vec3 tbigger  = max(t0s, t1s);

    float tmin = max(max(tsmaller.x, tsmaller.y), tsmaller.z);
    float tmax = min(min(tbigger.x, tbigger.y), tbigger.z);

    return tmax >= max(tmin, 0.0);
}

float traverseBVH(vec3 rayOrigin, vec3 rayDir, vec3 p, float r, float k, out int outId)
{
    const int MAX_STACK_SIZE = NUM_NODES;
    int stack[MAX_STACK_SIZE];
    int stackPtr = 0;

    stack[stackPtr++] = 1;

    float minDist = 1e5;
    int bestId = -1;

    while (stackPtr > 0)
    {
        int nodeIndex = stack[--stackPtr];
        Node node = ssbo.SSBONodes[nodeIndex];

        // Skip si hors de la bo�te englobante
        if (!intersectRayAABB(rayOrigin, rayDir, node.boxPos.xyz, node.boxPos.xyz + node.boxSize.xyz))
        {
            continue;
        }

        // Si feuille
        if (node.children.x < 1 && node.children.y < 1)
        {
            if(ubo_boxDebug == 1)
            {
                // show AABB
                float d = boxSDF(p, ssbo.SSBONodes[nodeIndex].boxPos.xyz, ssbo.SSBONodes[nodeIndex].boxSize.xyz);
                if (d < minDist)
                {
                    minDist = d;
                    bestId = nodeIndex;
                }
            }
            else
            {
                for (int i = 0; i < 16; ++i)
                {
                    vec3 cp = ssbo_2.cloudPoints[node.cloudPoints[i]].xyz;

                    float d = sphereSDF(p, cp, r);

                    // Applique smoothMin avec le blending courant
                    float blended = smoothMin(minDist, d, k);

                    // Si le current point a contribu� � r�duire la distance, on update l�ID
                    if (blended < minDist)
                    {
                        minDist = blended;
                        //bestId = nodeIndex * 16 + i;
                        bestId = nodeIndex;
                    }
                }
            }
        }
        
        else
        {
            // Empiler les enfants (droite puis gauche pour LIFO)
            if (node.children.y >= 1 && stackPtr < MAX_STACK_SIZE)
                stack[stackPtr++] = node.children.y;

            if (node.children.x >= 1 && stackPtr < MAX_STACK_SIZE)
                stack[stackPtr++] = node.children.x;
        }
    }

    outId = bestId;

    if(outId < 1)
    {
        return 0.0f;
    }

    return minDist;
}

float naiveLoop(vec3 rayOrigin, vec3 rayDir, vec3 p, float r, float k, out int outId)
{
    float minDist = 1e5;
    int bestId = -1;

    for(int i = 0; i < ssbo_2.cloudPoints.length(); i++)
    {
        vec3 cp = ssbo_2.cloudPoints[i].xyz;

        float d = sphereSDF(p, cp, r);

        if(d < minDist)
        {
            minDist = d;
            bestId = i;
        }
    }

    return minDist;
}

float sceneSDF(vec3 rayOrigin, vec3 rayDir, vec3 p, out Material material)
{
    int id = -1;
    float r = ubo_sphereRadius;
    float k = ubo_blendingFactor;

    float dist;
    if(false)
        dist = traverseBVH(rayOrigin, rayDir, p, r, k, id);
    else
        dist = naiveLoop(rayOrigin, rayDir, p, r, k, id);

    // Couleur en fonction de l'ID
    float uniqueNumber  = float((99 * id + 1) % 5) / 5.0;
    float uniqueNumber2 = float((99 * id + 2) % 5) / 5.0;
    float uniqueNumber3 = float((99 * id + 3) % 5) / 5.0;

    if(id == -1)
    {
        material.color = vec3(0, 0, 0);// background color
        return dist;
    }
    else if (ubo_randomColor == 1)
        material.color = vec3(uniqueNumber, uniqueNumber2, uniqueNumber3);
    else
        material.color = ubo_objectColor;

    material.reflectivity = ubo_reflectivity;

    return dist;
}

float rayMarch(Ray ray, out Material material)
{
    float distance = 0.0;
    for (int i = 0; i < MAX_STEPS; i++)
    {
        vec3 p = ray.origin + ray.direction * distance;
        float d = sceneSDF(ray.origin, ray.direction, p, material);
        if (d < EPSILON)
            return distance;
        distance += d;
        if (distance > ubo_far) break;
    }
    return -1.0;
}

vec3 getNormal(vec3 p, vec3 rayOrigin, vec3 rayDir)
{
    vec2 e = vec2(EPSILON, 0.0);
    Material dummyMaterial;
    return normalize(vec3(
        sceneSDF(rayOrigin, rayDir, p + e.xyy, dummyMaterial) - sceneSDF(rayOrigin, rayDir, p - e.xyy, dummyMaterial),
        sceneSDF(rayOrigin, rayDir, p + e.yxy, dummyMaterial) - sceneSDF(rayOrigin, rayDir, p - e.yxy, dummyMaterial),
        sceneSDF(rayOrigin, rayDir, p + e.yyx, dummyMaterial) - sceneSDF(rayOrigin, rayDir, p - e.yyx, dummyMaterial)
    ));
}

vec3 getColor(Ray ray, vec3 p, Material material)
{
    if (ubo_lighting == 0)
        return material.color;

    vec3 color = vec3(0.0);
    vec3 attenuation = vec3(1.0);

    for (int depth = 0; depth < MAX_RECURSION_DEPTH; depth++)
    {
        vec3 normal = getNormal(p, ray.origin, ray.direction);
        vec3 lightDir = normalize(ubo_lightingDir);
        float diff = max(dot(normal, lightDir), 0.0);
        vec3 diffuse = diff * material.color;
    
        color += attenuation * diffuse;
    
        vec3 reflectDir = reflect(ray.direction, normal);
        ray = Ray(p + reflectDir * EPSILON, reflectDir);
        float reflectDist = rayMarch(ray, material);
        if (reflectDist < 0.0) break;
    
        p = ray.origin + ray.direction * reflectDist;
        attenuation *= material.reflectivity;
    }

    return color;
}

vec3 skyColor(vec3 dir)
{
    float t = 0.5 * (dir.y + 1.0);
    return mix(vec3(0.4, 0.6, 0.9), vec3(0.7, 0.75, 0.8), t);
}

void main()
{
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imageSize = imageSize(img_output);

    if (pixelCoord.x >= imageSize.x || pixelCoord.y >= imageSize.y)
        return;

    vec2 uv = (vec2(pixelCoord) / vec2(imageSize)) * 2.0 - 1.0;
    uv.y *= -1.0; // flip vertical (comme fragment)

    Ray ray = generateRay(uv);
    Material material;
    float dist = rayMarch(ray, material);

    vec4 color = vec4(0.0);
    if (dist > 0.0)
    {
        vec3 p = ray.origin + ray.direction * dist;
        color = vec4(getColor(ray, p, material), 1.0);
    }
    else
    {
        color = vec4(skyColor(ray.direction), 1.0);
    }

    imageStore(img_output, pixelCoord, color);
}